# Custom filters for AS4242421080
{#
__        ___    ____  _   _ ___ _   _  ____ _
\ \      / / \  |  _ \| \ | |_ _| \ | |/ ___| |
 \ \ /\ / / _ \ | |_) |  \| || ||  \| | |  _| |
  \ V  V / ___ \|  _ <| |\  || || |\  | |_| |_|
   \_/\_/_/   \_\_| \_\_| \_|___|_| \_|\____(_)

__        ___    ____  _   _ ___ _   _  ____ _ _ _
\ \      / / \  |  _ \| \ | |_ _| \ | |/ ___| | | |
 \ \ /\ / / _ \ | |_) |  \| || ||  \| | |  _| | | |
  \ V  V / ___ \|  _ <| |\  || || |\  | |_| |_|_|_|
   \_/\_/_/   \_\_| \_\_| \_|___|_| \_|\____(_|_|_)

This file contains examples of custom route tweaks that I *happen to be using* on my network.
Many of these filters are designed specifically for my AS, and altogether they drastically alter the way that my network
processes dn42 routes.

In short, you are NOT meant to copy what's here. ESPECIALLY DON'T COPY PIECES YOU HAVEN'T TAKEN THE TIME TO UNDERSTAND YOURSELF!
If you just want BGP community support, look at community_filters.conf (it's based off the dn42 Wiki anyways)

#}
define OUTGOING_BGP_MED = {{ default_outgoing_bgp_med | default(0) }};

# Node ID is AS4242421080-specific and used for informational communities and route pinning. You probably don't need it
define NODEID = {{ ownip.rsplit('.', 1)[1] }};

define LC_ORIGIN_NODEID = 100;
define LC_ORIGIN_REGION = 101;

# Subnets to route through iBGP
# This includes anycast services as well as any single-homed downstreams with agreement
define IBGP_NETS_4 = [172.23.0.53/32, 172.20.0.81/32];
define IBGP_NETS_6 = [fd42:d42:d42:53::/64, fd42:d42:d42:81::/64];

function is_ibgp_network() {
    if net.type = NET_IP4 && net ~ IBGP_NETS_4 then {
        return true;
    } else if net.type = NET_IP6 && net ~ IBGP_NETS_6 then {
        return true;
    } else {
        return false;
    }
}

# These are custom region tags which group together regions that aren't efficient
# (from my observations) to separate for cold potato routing
function get_region_tag(int dn42_region_tag) {
    if (dn42_region_tag = 44) then {
        return 1;  # North America - West
    } else if (dn42_region_tag ~ [42..43]) then {
        return 2;  # North America - Central/East
    } else if (dn42_region_tag = 41) then {
        return 3;  # Europe
    } else if (dn42_region_tag ~ [50..53]) then {
        return 4;  # Asia Pacific
    } else if (dn42_region_tag = 46) then {
        return 5;  # South America
    }
    return 0;
}

define COLD_POTATO_IGNORE = [
    0  # placeholder
];
function prefer_cold_potato()
    int my_region_tag;
    int incoming_tag;
    pair incoming_region_community;
{
    # Cold potato routing: prefer routes originating in the same region as the current node, or routes that don't have
    # any region community set.
    # Applying this policy to routes without a community region fixes cases when peers accidentally attach region
    # communities to routes in transit. Otherwise, they will suck up a lot of routes because everything they export will
    # appear to have the same region tag as my (receiving) node.
    # In other words: if any prefix has routes both with and without a region community, ignore the region community as
    # it's likely to be bogus.
    my_region_tag = get_region_tag(DN42_REGION);
    incoming_tag = 0;

    if (bgp_path.last ~ COLD_POTATO_IGNORE) then {
        return 0;
    }

    # This will be set to (0, 0) if no matching community exists
    incoming_region_community = filter(bgp_community, [(64511, 41..53)]).min;

    # Note: reading community values requires Bird >= 2.0.9
    #print "Reading region tag ", incoming_region_community.data, " for route ", net, " from ", bgp_path.first;
    incoming_tag = get_region_tag(incoming_region_community.data);
    if (incoming_tag = 0 || incoming_tag = my_region_tag) then {
        bgp_med = 50;
    }
}

# Special cases I've added for route optimization, your mileage may vary
function handle_special_cases()
    bool is_anycast;
{
    # 2022-12-13: work around ghost routes; paths to well-connected peers should not need to travel through ICVPN
    if (bgp_path ~ [= * [65043, 65026, 65022, 65024] * [4242420101, 64719, 4242420119, 4242420197, 4242422923] * =]) then {
        reject;
    }

    is_anycast = (net.type = NET_IP4 && net.len = 32) || (net.type = NET_IP6 && net.len = 64);
    # Cold potato routing for selected EU-origin nets
    if (DN42_REGION != 41 && bgp_path ~
            [= * [4242420101, 65043, 64654, 4242421337, 65026] * =]) then {
        bgp_med = bgp_med + 20;
    }

    # Less preferred transits (usually due to incomplete interconnects or other
    # issues)
    if (bgp_path ~ [= [
            64719,
            4201271111,
            4242420207,
            4242420604,
            4242421288,
            4242422002,
            4242422904,
            4242422980,
            4242423035
        ] ? * =]) then {
            bgp_med = bgp_med + 15;
    }

    # Depref transit from massive networks (>200 peers)
    else if (bgp_path ~ [= [4242421588, 4242423914] ? * =]) then {
        bgp_med = bgp_med + 5;
    }
}

define ASES_REJECT = [
    0  # placeholder
];
function ebgp_import_filter()
    int my_region_tag;
{

    # Reject routes with unreasonable path lengths
    if (bgp_path.len > 8) then {
        reject "Rejected route for ", net, " with too long ", bgp_path;
    }
    # Lower is better
    bgp_med = 100;

    if (bgp_path ~ [= * ASES_REJECT * =]) then {
        reject "Rejected route for ", net, " from BLOCKED ASN";
    }

    # Strip internal communities from incoming routes before processing
    bgp_large_community.delete([(OWNAS, LC_ORIGIN_REGION, 41..53)]);
    bgp_large_community.delete([(OWNAS, LC_ORIGIN_NODEID, 112..127)]);
    bgp_large_community.delete([(OWNAS, LC_ORIGIN_NODEID, 33..39)]);

    prefer_cold_potato();
    handle_special_cases();

    # Implement BLACKHOLE community as defined by RFC 7999
    # Based off https://bird.network.cz/pipermail/bird-users/2016-October/010705.html
    if (source = RTS_BGP && (65535, 666) ~ bgp_community) then {
        dest = RTD_BLACKHOLE;
        print "Adding black hole route for ", net, bgp_path;
    }

    # Informational communities: region of import & node ID of import
    bgp_large_community.add((OWNAS, LC_ORIGIN_REGION, DN42_REGION));
    bgp_large_community.add((OWNAS, LC_ORIGIN_NODEID, NODEID));
};

function ebgp_export_filter() {
    bgp_med = OUTGOING_BGP_MED;

    # Informational communities: only node ID, as origin region uses standard dn42 community
    if (bgp_path.len = 0) then {
        bgp_large_community.add((OWNAS, LC_ORIGIN_NODEID, NODEID));
    }
    if source ~ [RTS_STATIC, RTS_DEVICE] then {
{% for region_tag in dn42_regions[1:] %}
        bgp_community.add((64511, {{ region_tag }}));
{% endfor %}
    }
};

function ibgp_import_filter() {
    # Only process routes originating from BGP unless they're anycast networks
    if (source != RTS_BGP && !is_ibgp_network()) then {
        reject "ibgp_import_filter: rejecting unknown prefix", net;
    }

    if (bgp_path.len = 0) then {
        # Prefer locally originated iBGP routes, e.g. for anycast services
        bgp_med = 10;
    }

    accept;
}

function ibgp_export_filter() {
    if (source != RTS_BGP && !is_ibgp_network()) then {
        reject;
    }
    accept;
}
